{"ast":null,"code":"const BASE_URL = 'http://localhost:5000';\nexport const uploadMemory = async file => {\n  const formData = new FormData();\n  formData.append('file', file);\n  const response = await fetch(`${BASE_URL}/upload`, {\n    method: 'POST',\n    body: formData\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Upload failed');\n  }\n  return await response.json();\n};\nexport const getProcessingStatus = async filename => {\n  const response = await fetch(`${BASE_URL}/processing-status/${filename}`);\n  return await response.json();\n};\nexport const searchMemory = async query => {\n  const response = await fetch(`${BASE_URL}/search?query=${encodeURIComponent(query)}`);\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Search failed');\n  }\n  return await response.json();\n};\nexport const getAllMemories = async () => {\n  const response = await fetch(`${BASE_URL}/memories`);\n  return await response.json();\n};\nexport const deleteMemory = async id => {\n  const response = await fetch(`${BASE_URL}/delete/${id}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Delete failed');\n  }\n  return await response.json();\n};\nexport const getHealthStatus = async () => {\n  const response = await fetch(`${BASE_URL}/health`);\n  return await response.json();\n};\nexport const analyzeMemory = async id => {\n  const response = await fetch(`${BASE_URL}/analyze/${id}`);\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Analysis failed');\n  }\n  return await response.json();\n};\nexport const getMemoryStats = async () => {\n  // This would need a corresponding endpoint in the backend\n  // For now, we'll calculate from all memories\n  const memories = await getAllMemories();\n  const totalDuration = memories.reduce((sum, memory) => sum + (memory.duration || 0), 0);\n  const languageCount = {};\n  memories.forEach(memory => {\n    const lang = memory.detected_language || 'unknown';\n    languageCount[lang] = (languageCount[lang] || 0) + 1;\n  });\n  return {\n    total: memories.length,\n    totalDuration,\n    languages: Object.keys(languageCount).map(lang => ({\n      language: lang,\n      count: languageCount[lang]\n    }))\n  };\n};","map":{"version":3,"names":["BASE_URL","uploadMemory","file","formData","FormData","append","response","fetch","method","body","ok","error","json","Error","getProcessingStatus","filename","searchMemory","query","encodeURIComponent","getAllMemories","deleteMemory","id","getHealthStatus","analyzeMemory","getMemoryStats","memories","totalDuration","reduce","sum","memory","duration","languageCount","forEach","lang","detected_language","total","length","languages","Object","keys","map","language","count"],"sources":["C:/Users/Asus/AI_Memory_Augmentation/AI_Memory_Augmentation/frontend/src/api.js"],"sourcesContent":["const BASE_URL = 'http://localhost:5000';\r\n\r\nexport const uploadMemory = async (file) => {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    const response = await fetch(`${BASE_URL}/upload`, {\r\n        method: 'POST',\r\n        body: formData,\r\n    });\r\n    \r\n    if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.error || 'Upload failed');\r\n    }\r\n    \r\n    return await response.json();\r\n};\r\n\r\nexport const getProcessingStatus = async (filename) => {\r\n    const response = await fetch(`${BASE_URL}/processing-status/${filename}`);\r\n    return await response.json();\r\n};\r\n\r\nexport const searchMemory = async (query) => {\r\n    const response = await fetch(`${BASE_URL}/search?query=${encodeURIComponent(query)}`);\r\n    \r\n    if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.error || 'Search failed');\r\n    }\r\n    \r\n    return await response.json();\r\n};\r\n\r\nexport const getAllMemories = async () => {\r\n    const response = await fetch(`${BASE_URL}/memories`);\r\n    return await response.json();\r\n};\r\n\r\nexport const deleteMemory = async (id) => {\r\n    const response = await fetch(`${BASE_URL}/delete/${id}`, { \r\n        method: 'DELETE' \r\n    });\r\n    \r\n    if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.error || 'Delete failed');\r\n    }\r\n    \r\n    return await response.json();\r\n};\r\n\r\nexport const getHealthStatus = async () => {\r\n    const response = await fetch(`${BASE_URL}/health`);\r\n    return await response.json();\r\n};\r\n\r\nexport const analyzeMemory = async (id) => {\r\n    const response = await fetch(`${BASE_URL}/analyze/${id}`);\r\n    \r\n    if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.error || 'Analysis failed');\r\n    }\r\n    \r\n    return await response.json();\r\n};\r\n\r\nexport const getMemoryStats = async () => {\r\n    // This would need a corresponding endpoint in the backend\r\n    // For now, we'll calculate from all memories\r\n    const memories = await getAllMemories();\r\n    \r\n    const totalDuration = memories.reduce((sum, memory) => sum + (memory.duration || 0), 0);\r\n    const languageCount = {};\r\n    \r\n    memories.forEach(memory => {\r\n        const lang = memory.detected_language || 'unknown';\r\n        languageCount[lang] = (languageCount[lang] || 0) + 1;\r\n    });\r\n    \r\n    return {\r\n        total: memories.length,\r\n        totalDuration,\r\n        languages: Object.keys(languageCount).map(lang => ({\r\n            language: lang,\r\n            count: languageCount[lang]\r\n        }))\r\n    };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}