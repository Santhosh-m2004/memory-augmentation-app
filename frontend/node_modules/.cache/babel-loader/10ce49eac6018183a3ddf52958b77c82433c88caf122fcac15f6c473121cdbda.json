{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\AI_Memory_Augmentation\\\\AI_Memory_Augmentation\\\\frontend\\\\src\\\\MemoryUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { uploadMemory } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MemoryUploader() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const handleUpload = async () => {\n    setMessage('');\n    setError('');\n    if (!file) {\n      setError('Please select a file first.');\n      return;\n    }\n    setLoading(true);\n    try {\n      const result = await uploadMemory(file);\n      setMessage(result.message || 'Memory uploaded successfully!');\n    } catch (err) {\n      setError('Failed to upload memory. Please try again.');\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload Memory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: e => setFile(e.target.files[0])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: loading,\n      children: loading ? 'Uploading...' : 'Upload'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'green'\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n_s(MemoryUploader, \"R+JQb+De65E5+vacE3yswD+VIP0=\");\n_c = MemoryUploader;\nexport default MemoryUploader;\nvar _c;\n$RefreshReg$(_c, \"MemoryUploader\");","map":{"version":3,"names":["React","useState","uploadMemory","jsxDEV","_jsxDEV","MemoryUploader","_s","file","setFile","message","setMessage","error","setError","loading","setLoading","handleUpload","result","err","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","files","onClick","disabled","style","color","_c","$RefreshReg$"],"sources":["C:/Users/Asus/AI_Memory_Augmentation/AI_Memory_Augmentation/frontend/src/MemoryUploader.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { uploadMemory } from './api';\r\n\r\nfunction MemoryUploader() {\r\n    const [file, setFile] = useState(null);\r\n    const [message, setMessage] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const handleUpload = async () => {\r\n        setMessage('');\r\n        setError('');\r\n\r\n        if (!file) {\r\n            setError('Please select a file first.');\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        try {\r\n            const result = await uploadMemory(file);\r\n            setMessage(result.message || 'Memory uploaded successfully!');\r\n        } catch (err) {\r\n            setError('Failed to upload memory. Please try again.');\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Upload Memory</h2>\r\n            <input type=\"file\" onChange={(e) => setFile(e.target.files[0])} />\r\n            <button onClick={handleUpload} disabled={loading}>\r\n                {loading ? 'Uploading...' : 'Upload'}\r\n            </button>\r\n\r\n            {message && <p style={{ color: 'green' }}>{message}</p>}\r\n            {error && <p style={{ color: 'red' }}>{error}</p>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MemoryUploader;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,YAAY,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMc,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7BL,UAAU,CAAC,EAAE,CAAC;IACdE,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI,CAACL,IAAI,EAAE;MACPK,QAAQ,CAAC,6BAA6B,CAAC;MACvC;IACJ;IAEAE,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACA,MAAME,MAAM,GAAG,MAAMd,YAAY,CAACK,IAAI,CAAC;MACvCG,UAAU,CAACM,MAAM,CAACP,OAAO,IAAI,+BAA+B,CAAC;IACjE,CAAC,CAAC,OAAOQ,GAAG,EAAE;MACVL,QAAQ,CAAC,4CAA4C,CAAC;IAC1D;IACAE,UAAU,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,oBACIV,OAAA;IAAAc,QAAA,gBACId,OAAA;MAAAc,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBlB,OAAA;MAAOmB,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAGC,CAAC,IAAKjB,OAAO,CAACiB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAAE;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClElB,OAAA;MAAQwB,OAAO,EAAEb,YAAa;MAACc,QAAQ,EAAEhB,OAAQ;MAAAK,QAAA,EAC5CL,OAAO,GAAG,cAAc,GAAG;IAAQ;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,EAERb,OAAO,iBAAIL,OAAA;MAAG0B,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAQ,CAAE;MAAAb,QAAA,EAAET;IAAO;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACtDX,KAAK,iBAAIP,OAAA;MAAG0B,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAb,QAAA,EAAEP;IAAK;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEd;AAAChB,EAAA,CArCQD,cAAc;AAAA2B,EAAA,GAAd3B,cAAc;AAuCvB,eAAeA,cAAc;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}