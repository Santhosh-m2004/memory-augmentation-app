{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\AI_Memory_Augmentation\\\\AI_Memory_Augmentation\\\\frontend\\\\src\\\\MemoryUploader.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { uploadMemory } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MemoryUploader() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const handleUpload = async () => {\n    setMessage('');\n    setError('');\n    if (!file) {\n      setError('Please select a file first.');\n      return;\n    }\n    setLoading(true);\n    try {\n      const result = await uploadMemory(file);\n      setMessage(result.message || 'Memory uploaded successfully!');\n    } catch (err) {\n      setError('Failed to upload memory. Please try again.');\n    }\n    setLoading(false);\n  };\n  const styles = {\n    container: {\n      maxWidth: '400px',\n      margin: '60px auto',\n      padding: '30px',\n      background: '#f9f9f9',\n      borderRadius: '12px',\n      boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)',\n      fontFamily: 'Segoe UI, sans-serif',\n      textAlign: 'center'\n    },\n    title: {\n      fontSize: '24px',\n      marginBottom: '20px',\n      color: '#333'\n    },\n    fileInput: {\n      marginBottom: '20px',\n      padding: '8px',\n      border: '2px solid #ddd',\n      borderRadius: '8px',\n      cursor: 'pointer',\n      width: '100%'\n    },\n    button: {\n      backgroundColor: loading ? '#bbb' : '#4a90e2',\n      color: 'white',\n      padding: '10px 20px',\n      border: 'none',\n      borderRadius: '8px',\n      cursor: loading ? 'not-allowed' : 'pointer',\n      fontWeight: 'bold',\n      transition: 'background-color 0.3s ease'\n    },\n    successMessage: {\n      color: '#2e7d32',\n      marginTop: '15px',\n      fontWeight: '500'\n    },\n    errorMessage: {\n      color: '#c62828',\n      marginTop: '15px',\n      fontWeight: '500'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: styles.title,\n      children: \"Upload Memory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: e => setFile(e.target.files[0]),\n      style: styles.fileInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: loading,\n      style: styles.button,\n      children: loading ? 'Uploading...' : 'Upload'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: styles.successMessage,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: styles.errorMessage,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n_s(MemoryUploader, \"R+JQb+De65E5+vacE3yswD+VIP0=\");\n_c = MemoryUploader;\nexport default MemoryUploader;\nvar _c;\n$RefreshReg$(_c, \"MemoryUploader\");","map":{"version":3,"names":["React","useState","uploadMemory","jsxDEV","_jsxDEV","MemoryUploader","_s","file","setFile","message","setMessage","error","setError","loading","setLoading","handleUpload","result","err","styles","container","maxWidth","margin","padding","background","borderRadius","boxShadow","fontFamily","textAlign","title","fontSize","marginBottom","color","fileInput","border","cursor","width","button","backgroundColor","fontWeight","transition","successMessage","marginTop","errorMessage","style","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","files","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Asus/AI_Memory_Augmentation/AI_Memory_Augmentation/frontend/src/MemoryUploader.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { uploadMemory } from './api';\r\n\r\nfunction MemoryUploader() {\r\n    const [file, setFile] = useState(null);\r\n    const [message, setMessage] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const handleUpload = async () => {\r\n        setMessage('');\r\n        setError('');\r\n\r\n        if (!file) {\r\n            setError('Please select a file first.');\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        try {\r\n            const result = await uploadMemory(file);\r\n            setMessage(result.message || 'Memory uploaded successfully!');\r\n        } catch (err) {\r\n            setError('Failed to upload memory. Please try again.');\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const styles = {\r\n        container: {\r\n            maxWidth: '400px',\r\n            margin: '60px auto',\r\n            padding: '30px',\r\n            background: '#f9f9f9',\r\n            borderRadius: '12px',\r\n            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)',\r\n            fontFamily: 'Segoe UI, sans-serif',\r\n            textAlign: 'center',\r\n        },\r\n        title: {\r\n            fontSize: '24px',\r\n            marginBottom: '20px',\r\n            color: '#333',\r\n        },\r\n        fileInput: {\r\n            marginBottom: '20px',\r\n            padding: '8px',\r\n            border: '2px solid #ddd',\r\n            borderRadius: '8px',\r\n            cursor: 'pointer',\r\n            width: '100%',\r\n        },\r\n        button: {\r\n            backgroundColor: loading ? '#bbb' : '#4a90e2',\r\n            color: 'white',\r\n            padding: '10px 20px',\r\n            border: 'none',\r\n            borderRadius: '8px',\r\n            cursor: loading ? 'not-allowed' : 'pointer',\r\n            fontWeight: 'bold',\r\n            transition: 'background-color 0.3s ease',\r\n        },\r\n        successMessage: {\r\n            color: '#2e7d32',\r\n            marginTop: '15px',\r\n            fontWeight: '500',\r\n        },\r\n        errorMessage: {\r\n            color: '#c62828',\r\n            marginTop: '15px',\r\n            fontWeight: '500',\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div style={styles.container}>\r\n            <h2 style={styles.title}>Upload Memory</h2>\r\n            <input\r\n                type=\"file\"\r\n                onChange={(e) => setFile(e.target.files[0])}\r\n                style={styles.fileInput}\r\n            />\r\n            <button\r\n                onClick={handleUpload}\r\n                disabled={loading}\r\n                style={styles.button}\r\n            >\r\n                {loading ? 'Uploading...' : 'Upload'}\r\n            </button>\r\n\r\n            {message && <p style={styles.successMessage}>{message}</p>}\r\n            {error && <p style={styles.errorMessage}>{error}</p>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MemoryUploader;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}